generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "./zod/schemas" // default is ./generated/zod
  useMultipleFiles                 = true // default is false
  writeBarrelFiles                 = true // default is true
  createInputTypes                 = false // default is true
  createModelTypes                 = true // default is true
  addInputTypeValidation           = false // default is true
  addIncludeType                   = true // default is true
  addSelectType                    = false // default is true
  validateWhereUniqueInput         = false // default is true
  createOptionalDefaultValuesTypes = false // default is false
  createRelationValuesTypes        = true // default is false
  createPartialTypes               = false // default is false
  useDefaultValidators             = true // default is true
  coerceDate                       = true // default is true
  writeNullishInModelTypes         = false // default is false
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        String    @id @default(uuid())
  revenues  Revenue[]
  name      String    @db.VarChar(255)
  email     String    @unique @db.VarChar(255)
  password  String    @db.VarChar(255)
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")

  @@map("users")
}

model Customer {
  id        String    @id @default(uuid())
  invoices  Invoice[]
  name      String    @db.VarChar(255)
  email     String    @unique @db.VarChar(255)
  imageUrl  String    @map(name: "image_url") @db.VarChar(255)
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")

  @@map("customers")
}

enum InvoiceStatus {
  Pending @map("pending")
  Paid    @map("paid")
}

model Invoice {
  id         String        @id @default(uuid())
  customerId String        @map(name: "customer_id")
  customer   Customer      @relation(fields: [customerId], references: [id])
  amount     Int
  status     InvoiceStatus @default(Pending)
  date       DateTime      @db.Date
  createdAt  DateTime      @default(now()) @map(name: "created_at")
  updatedAt  DateTime      @updatedAt @map(name: "updated_at")

  @@map("invoices")
}

model Revenue {
  id        Int      @id @default(autoincrement())
  userId    String   @map(name: "user_id")
  user      User     @relation(fields: [userId], references: [id])
  month     String   @db.VarChar(6)
  revenue   Int
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@unique(fields: [userId, month])
  @@map("revenues")
}
